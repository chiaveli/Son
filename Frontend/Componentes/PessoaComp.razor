@using Son.Comum.Enumerados
@using Son.Comum.Infra
@using Son.Comum.Model
@using System.Text
@using Son.Infra;

<PageTitle>Cadastro de Usuários</PageTitle>

@if (MostrarTitulo)
{
    <h3>Cadastro de Usuário</h3>
}

<Mensagem @ref="@msg"></Mensagem>
<ConfirmDialog @ref="conf"></ConfirmDialog>

@* OnValidSubmit="ValidSubmit" OnInvalidSubmit="InvalidSubmit" *@

<EditForm EditContext="editCtx" @ref="form" OnValidSubmit="ValidSubmit" OnInvalidSubmit="InvalidSubmit">

    <DataAnnotationsValidator/>
    @* Fone até 768px          = .col-xs-*
    Tablet   grade pequena (≥ 768px) = .col-sm-*,
    Desktops grade média (≥ 992px) = .col-md-*,
    Desktops grade grande (≥ 1200px) = .col-lg-*. *@

    <div class="row col-8 DivSpace">
        <label>Nome (*)</label>
        <TextInput @bind-Value="ModelPessoa!.Nome"></TextInput>
        <ValidationMessage For="() => ModelPessoa.Nome"></ValidationMessage>
    </div>

    <div class="row col-8 DivSpace">
        <label>Fone</label>
        <TextInput @bind-Value="ModelPessoa.Fone"></TextInput>
        <ValidationMessage For="() => ModelPessoa.Fone"></ValidationMessage>
    </div>

    <div class="row col-8 DivSpace">
        <label>Email (*)</label>
        <TextInput @bind-Value="ModelPessoa.Email"></TextInput>
        <ValidationMessage For="() => ModelPessoa.Email"></ValidationMessage>
    </div>

    <div class="row col-4 DivSpace">
        <label>Data de Nascimento (*)</label>
        <DateInput TValue="DateTime?" @bind-Value="ModelPessoa.DataNasc"></DateInput>
        <ValidationMessage For="() => ModelPessoa.DataNasc"></ValidationMessage>
    </div>

    <div class="row col-4 DivSpace">
        <label>Sexo (*)</label>
        <div class="form-control">
            <RadioInput class="col-2" Name="rdbSexo" Label="Masculino" @bind-Value="masculino" @onclick="SetSexo"></RadioInput>
            <RadioInput class="col-2" Name="rdbSexo" Label="Feminino" @bind-Value="feminino" @onclick="SetSexo"></RadioInput>
        </div> 
    </div>

    <div class="row col-5 DivSpace">
        <label>Senha (*)</label>
        <PasswordInput @bind-Value="ModelPessoa.Senha"></PasswordInput>
        <ValidationMessage For="() => ModelPessoa.Senha"></ValidationMessage>
    </div>

    <div class="row col-5 DivSpace">
        <label>Confirme a Senha (*)</label>
        <PasswordInput @bind-Value="ModelPessoa.ConfirmarSenha"></PasswordInput>
        <ValidationMessage For="() => ModelPessoa.ConfirmarSenha"></ValidationMessage>
    </div>

    <div class="row col-4 DivSpace">
        <label>Perfil</label>
        <div>
            <InputSelect @bind-Value="@ModelPessoa.Perfil" class="form-select">
                @foreach (var item in Enum.GetNames(typeof(Perfil)))
                {
                    <option value=@item>@item</option>
                }
            </InputSelect>
        </div>
    </div>

    <br/>
    @Texto
    <Button type="ButtonType.Submit" Class="btn-primary">Salvar</Button>
    <Button Class="btn-secondary" @onclick="Descartar">Descartar</Button>

</EditForm>



@code 
{
    private PessoaModel? pessoa = new();
    private bool masculino = true;
    private bool feminino = false;
    private ConfirmDialog conf = new();
    private Mensagem msg = default!;
    private EditForm form = default!;
    private EditContext? editCtx;
    private string Texto = "";

    [Parameter]
    public PessoaModel? ModelPessoa { get; set; }

    [Parameter]
    public EventCallback<(PessoaModel, Boolean)> AoResponder { get; set; }

    [Parameter]
    public bool MostrarTitulo { get; set; } = true;

    [Parameter]
    public string LarguraCampos { get; set; } = "col-6";

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }   

    public override Task SetParametersAsync(ParameterView parameters)
    {
        pessoa = parameters.GetValueOrDefault<PessoaModel>("ModelPessoa");
        pessoa!.ConfirmarSenha = pessoa.Senha;
        return base.SetParametersAsync(parameters);
    }

    protected override Task OnInitializedAsync()
    {
        pessoa = ModelPessoa;

        if (ModelPessoa!.IdPessoa == 0)
        {        
            ModelPessoa!.Ativo = "S";
            ModelPessoa.DataCadastro = DateTime.Now;
            ModelPessoa.DataNasc = null;
            ModelPessoa.Sexo = "M";
            ModelPessoa.Perfil = "Usuario";
        }

        editCtx = new EditContext(ModelPessoa!);
        return base.OnInitializedAsync();
    }

    private async void ValidSubmit()
    {
        await AoResponder.InvokeAsync((pessoa!, true));
    }

    private async void InvalidSubmit()
    {
        await msg.Mostrar("Dados inconsistentes. Verifique o formulário", "Cadastro de Usuário");
        return;
    }

    private async Task Descartar()
    {
        await AoResponder.InvokeAsync((pessoa!, false));
    }
    
    private void SetSexo()
    {
        if (masculino)
            pessoa!.Sexo = "M";
        else
            pessoa!.Sexo = "F";
    }

    public void Limpar()
    {
        pessoa = new();
        pessoa!.Ativo = "S";
        pessoa.DataCadastro = DateTime.Now;
        pessoa.DataNasc = null;
        pessoa.Sexo = "M";

    }


}
