@page "/ListarPessoa"
@using Son.Comum.Model
@using Son.Componentes
@using Son.Infra
@inject HttpClient api

<PageTitle>Usuários</PageTitle>

<h3>Usuários</h3>

<Mensagem @ref="@mensagem"></Mensagem>
<ConfirmDialog @ref="confirmDialog" />

<Modal @ref="modalUsuario" title="Cadastro de usuário" UseStaticBackdrop="true" Size="ModalSize.Large">

    <BodyTemplate> 
        <PessoaComp @ref="compPessoa" ModelPessoa="pessoaSelecionada"
        MostrarTitulo="false" 
        AoResponder="AoResponderUsuario"
        LarguraCampos="col-2" />

    </BodyTemplate>

    <FooterTemplate>
        @* <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
        <Button Color="ButtonColor.Primary">Save changes</Button>*@
    </FooterTemplate>

</Modal>

<Button Class="btn btn-primary" @onclick="AdicionarUsuario">Adicionar um Novo Usuário</Button>

@* AllowSelection="true"
SelectionMode="GridSelectionMode.Single" *@

<Grid @ref="gridDados" TItem="PessoaModel"
Class="table table-hover table-bordered table-striped"
FiltersRowCssClass="bg-primary text-white bg-opacity-25 border-bottom-0"
HeaderRowCssClass="bg-primary text-white border-bottom-0"
DataProvider="PessoaDataProvider"
AllowFiltering="true"
AllowPaging="true"
AllowSorting="true"
AllowRowClick="true"
OnRowDoubleClick="OnRowDoubleClick"
FiltersTranslationProvider="TraduzirFiltros"
PageSize="@qtdeLinhasGrid"
OnRowClick="OnRowClick"
Responsive="true">

    <GridColumns>
        <GridColumn TItem="PessoaModel" HeaderText="Código" PropertyName="IdPessoa" SortKeySelector="item => item.IdPessoa">
            @context.IdPessoa
        </GridColumn>
        <GridColumn TItem="PessoaModel" HeaderText="Nome" PropertyName="Nome" SortKeySelector="item => item.Nome">
            @context.Nome
        </GridColumn>
        <GridColumn TItem="PessoaModel" HeaderText="Fone" PropertyName="Fone" SortKeySelector="item => item.Fone">
            @context.Fone
        </GridColumn>
        <GridColumn TItem="PessoaModel" HeaderText="Email" PropertyName="Email" SortKeySelector="item => item.Email">
            @context.Email
        </GridColumn>
        <GridColumn TItem="PessoaModel" HeaderText="Perfil" PropertyName="Email" SortKeySelector="item => item.Perfil">
            @context.Perfil
        </GridColumn>
        <GridColumn TItem="PessoaModel" HeaderText="Ação" PropertyName="" Filterable="false">
            <Button Class="btn btn-primary" @onclick="@(() => EditarUsuario(@context))">Editar</Button>
        </GridColumn>
        <GridColumn TItem="PessoaModel" HeaderText="Ação" PropertyName="" Filterable="false">
            <Button Class="btn btn-primary" @onclick="@(() => ExcluirUsuario(@context.IdPessoa))">Excluir</Button>
        </GridColumn>
    </GridColumns>

</Grid>

@code {
    private List<PessoaModel> pessoas = default!;
    private Mensagem mensagem = default!;
    private int qtdeLinhasGrid = 15;
    private PessoaModel? pessoaSelecionada = new();
    private PessoaComp? compPessoa = default!;
    private Modal modalUsuario = default!;
    private long idSelecionado;
    private Grid<PessoaModel> gridDados = default!;
    private ConfirmDialog confirmDialog = new();


    [Inject]
    private ModalService mensagemModal { get; set; } = new();

    private async Task<GridDataProviderResult<PessoaModel>> PessoaDataProvider(GridDataProviderRequest<PessoaModel> request)
    {
        Uri uri = api.BaseAddress!;
        var retorno = await api.GetFromJsonAsync<List<PessoaModel>>("Pessoa/Obter/IdPessoa > 0");
        pessoas = retorno!.ToList();
        return await Task.FromResult(request.ApplyTo(pessoas));
    }

    private async Task OnRowDoubleClick(GridRowEventArgs<PessoaModel> args)
    {
        await EditarUsuario(args.Item);
    }

    private async Task<IEnumerable<FilterOperatorInfo>> TraduzirFiltros()
    {
        var filtersTranslation = new List<FilterOperatorInfo>();

        // number/date/boolean
        filtersTranslation.Add(new("=", "Igual a", FilterOperator.Equals));
        filtersTranslation.Add(new("!=", "Diferente de", FilterOperator.NotEquals));
        // number/date
        filtersTranslation.Add(new("<", "Menor que", FilterOperator.LessThan));
        filtersTranslation.Add(new("<=", "Menor ou igual a", FilterOperator.LessThanOrEquals));
        filtersTranslation.Add(new(">", "Maior que", FilterOperator.GreaterThan));
        filtersTranslation.Add(new(">=", "Maior ou igual a", FilterOperator.GreaterThanOrEquals));
        // string
        filtersTranslation.Add(new("*a*", "Contem", FilterOperator.Contains));
        filtersTranslation.Add(new("!*a*", "Não contem", FilterOperator.DoesNotContain));
        filtersTranslation.Add(new("a**", "Começa com", FilterOperator.StartsWith));
        filtersTranslation.Add(new("**a", "Termina com", FilterOperator.EndsWith));
        filtersTranslation.Add(new("=", "Igual a", FilterOperator.Equals));
        // common
        filtersTranslation.Add(new("x", "Limpar filtro", FilterOperator.Clear));

        return await Task.FromResult(filtersTranslation);
    }

    private void OnRowClick(GridRowEventArgs<PessoaModel> args)
    {
        pessoaSelecionada = args.Item;
    }

    private async void AoResponderUsuario((PessoaModel, bool) parametro)
    {
        string? msg;
        HttpResponseMessage retorno;

        if (parametro.Item2)
        {	
            try
            {
                if (parametro.Item1.IdPessoa == 0)
                {
                    retorno = await api.PostAsJsonAsync<PessoaModel>("Pessoa/Inserir", parametro.Item1);
                    await gridDados.RefreshDataAsync();                
                }
                else
                    retorno = await api.PostAsJsonAsync<PessoaModel>("Pessoa/Alterar", parametro.Item1);

                msg = await retorno.Content.ReadAsStringAsync();
            }
            catch (Exception ex)
            {
                if (ex.Message.Trim().ToUpper() == "TYPEERROR: FAILED TO FETCH")
                    msg = "Não foi possível conectar ao servidor (API)\n" + ex.Message;
                else
                    msg = ex.Message;
            }
            finally
            {
                await modalUsuario.HideAsync();
            }


            if (string.IsNullOrEmpty(msg))
            {
                await mensagem.Mostrar("Dados salvo com sucesso");
                compPessoa!.Limpar();
            }
            else
            {
                string msgTexto = msg.ToUpper();

                if (msgTexto.Contains("One or more validation errors occurred".ToUpper()))
                    await mensagem.Mostrar("Preencha os campos obrigatório.");
                else
                    await mensagem.Mostrar(msg);
            }
        }
        else
        {
            compPessoa!.Limpar();
            await modalUsuario.HideAsync();
        }

        return;

    }

    private async void ExcluirUsuario(long pIdPessoa)
    {
        if (pIdPessoa <= 0)
            return;

        bool confirmaExclusao = await confirmDialog.Confirmar("Tem certeza que deseja excluir o registro?", "Cadastro de Usuários");

        if (!confirmaExclusao)
            return;

        HttpResponseMessage resposta = await api.DeleteAsync($"Pessoa/Excluir/{pIdPessoa}");
        string mensagemResposta = await resposta.Content.ReadAsStringAsync();

        if (!string.IsNullOrEmpty(mensagemResposta))
        {
            await mensagem.Mostrar($"Falha ao tentar excluir o usuário/n{mensagemResposta}");
        }
        else
        {
            pessoas.RemoveAll(p => p.IdPessoa == pIdPessoa);            
            await gridDados.RefreshDataAsync();
        }

    }

    private async void AdicionarUsuario()
    {
        await modalUsuario.ShowAsync();
    }

    private async Task EditarUsuario(PessoaModel pPessoa)
    {
        pessoaSelecionada = pPessoa;
        pessoaSelecionada.ConfirmarSenha = pessoaSelecionada.Senha;
        await modalUsuario.ShowAsync();
    }
}
